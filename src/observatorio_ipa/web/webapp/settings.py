"""
Django settings for webapp project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from observatorio_ipa.web.config import web_settings_init, db_settings_as_dict


# Web application settings
runtime_web_settings = web_settings_init()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = runtime_web_settings.django.secret_key_file.read_text().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = runtime_web_settings.django.debug

ALLOWED_HOSTS = [] + runtime_web_settings.django.allowed_hosts


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
    "debug_toolbar",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_tables2",
    "django_filters",
    "accounts",
    "jobs",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "webapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            str(BASE_DIR / "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "webapp.context_processors.oauth_context",
            ],
        },
    },
]

WSGI_APPLICATION = "webapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
default_db_settings = db_settings_as_dict(runtime_web_settings.default_db)
ipa_db_settings = db_settings_as_dict(runtime_web_settings.ipa_db)

DATABASES = {
    "default": {
        "ENGINE": default_db_settings["engine"],
        "NAME": default_db_settings["name"],
        "USER": default_db_settings["user"] or "",
        "PASSWORD": default_db_settings["password"] or "",
        "HOST": default_db_settings["host"] or "",
        "PORT": default_db_settings["port"] or "",
    },
    "ipa": {
        "ENGINE": ipa_db_settings["engine"],
        "NAME": ipa_db_settings["name"],
        "USER": ipa_db_settings["user"] or "",
        "PASSWORD": ipa_db_settings["password"] or "",
        "HOST": ipa_db_settings["host"] or "",
        "PORT": ipa_db_settings["port"] or "",
    },
}

DATABASE_ROUTERS = ["jobs.db_router.IPARouter"]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----- Custom User Model -----
AUTH_USER_MODEL = "accounts.User"

# ----- Django Allauth Configuration -----
SITE_ID = 1
ACCOUNT_SIGNUP_ALLOWED = False
ACCOUNT_LOGIN_METHODS = {"username", "email"}
# ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"
# ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_SESSION_REMEMBER = True
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "/accounts/login/"
ACCOUNT_PASSWORD_CHANGE_REDIRECT_URL = "home"
# Disable signup form and redirect
# ACCOUNT_SIGNUP_FORM_CLASS = None
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# GCP Oauth settings
GCP_OAUTH_ENABLED = runtime_web_settings.gcp_oauth.enable_gcp_oauth

if oauth_client_id_file := runtime_web_settings.gcp_oauth.oauth_client_id_file:
    GCP_OAUTH_CLIENT_ID = oauth_client_id_file.read_text().strip()
else:
    GCP_OAUTH_CLIENT_ID = None

if oauth_secret_file := runtime_web_settings.gcp_oauth.oauth_client_secret_file:
    GCP_OAUTH_SECRET = oauth_secret_file.read_text().strip()
else:
    GCP_OAUTH_SECRET = None

GCP_PROJECT_ID = runtime_web_settings.gcp_oauth.gcp_project_id

# GitHub OAuth settings
GITHUB_OAUTH_ENABLED = runtime_web_settings.github_oauth.enable_github_oauth

if github_client_id_file := runtime_web_settings.github_oauth.oauth_client_id_file:
    GITHUB_OAUTH_CLIENT_ID = github_client_id_file.read_text().strip()
else:
    GITHUB_OAUTH_CLIENT_ID = None

if github_secret_file := runtime_web_settings.github_oauth.oauth_client_secret_file:
    GITHUB_OAUTH_SECRET = github_secret_file.read_text().strip()
else:
    GITHUB_OAUTH_SECRET = None

GITHUB_REPOSITORY_OWNER = runtime_web_settings.github_oauth.repository_owner
GITHUB_REPOSITORY_NAME = runtime_web_settings.github_oauth.repository_name

# Configure social account providers
SOCIALACCOUNT_PROVIDERS = {}

if GCP_OAUTH_ENABLED and GCP_OAUTH_CLIENT_ID and GCP_OAUTH_SECRET:
    SOCIALACCOUNT_PROVIDERS["google"] = {
        "SCOPE": [
            "profile",
            "email",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "VERIFIED_EMAIL": True,
        "APP": {"client_id": GCP_OAUTH_CLIENT_ID, "secret": GCP_OAUTH_SECRET},
    }

if GITHUB_OAUTH_ENABLED and GITHUB_OAUTH_CLIENT_ID and GITHUB_OAUTH_SECRET:
    SOCIALACCOUNT_PROVIDERS["github"] = {
        "SCOPE": [
            "read:user",
            "user:email",
        ],
        "APP": {"client_id": GITHUB_OAUTH_CLIENT_ID, "secret": GITHUB_OAUTH_SECRET},
    }

# Set custom adapter if any OAuth provider is configured
if SOCIALACCOUNT_PROVIDERS:
    SOCIALACCOUNT_ADAPTER = "webapp.adapters.CustomSocialAccountAdapter"


# ---- Debug Toolbar Configuration -----
INTERNAL_IPS = [
    "127.0.0.1",
    "localhost",
]

# ----- Crispy Forms Configuration -----
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ----- Django Tables2 Configuration -----
DJANGO_TABLES2_TEMPLATE = "django_tables2/bootstrap5.html"


# ----- Whitenoise Configuration -----
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    }
}

# --- Logging configuration for production debugging ---

LOG_DIR = os.environ.get("DJANGO_LOG_DIR", BASE_DIR / "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(asctime)s %(levelname)s %(name)s %(message)s"},
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": str(LOG_DIR) + "/django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["file", "console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}


CSRF_TRUSTED_ORIGINS = [] + runtime_web_settings.django.csrf_trusted_origins
